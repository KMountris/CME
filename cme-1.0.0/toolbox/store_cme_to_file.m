function [] = store_cme_to_file(cme, cme_output, neighs_output)
%
% function [] = store_cme_to_file(cme, cme_output, neighs_output)
%
% Usage:   Stores cme approximants and the neighbors list for each sampling point in file
%
% Syntax:  [] = store_cme_to_file(cme, cme_output, neighs_output)
%
% INPUT:
%    cme           - The cme approximants to be stored
%    cme_output    - The path to store the cme approximants
%    neighs_output - The path to store the neighbors list
%
% OUTPUT:
%    none
%
%
% Author: Konstantinos A. Mountris, PhD, University of Zaragoza, Zaragoza, Spain
% email:  konstantinos.mountris@gmail.com | kmountris@unizar.es
% web:    https://www.mountris.org
% 
% Last update: 20/10/2019
%
%
% References:
% [1] Mountris, KA, Bourantas, GC, Millán, D, et al. Cell‐based maximum entropy approximants for three‐dimensional domains: 
%     Application in large strain elastodynamics using the meshless total Lagrangian explicit dynamics method. 
%     Int J Numer Methods Eng. 2019; 1– 15. https://doi.org/10.1002/nme.6218 
%
%%

% Check if cme_output is string
if ((ischar(cme_output) == 0) && (isstring(cme_output) == 0))
    error('cme_output is not string or character array');
end

% Check if neighs_output is string
if ((ischar(neighs_output) == 0) && (isstring(neighs_output) == 0))
    error('neighs_output is not string or character array');
end

if (isfield(cme,'phi') && isfield(cme,'dphi') && isfield(cme,'neighs'))
  phi = cme.phi;
  dphi = cme.dphi;
  neighs = cme.neighs;
else
  error('CME data structures missing for output')
end


format long

% Number of sampling points for which CME are evaluated
s_num = length(phi);

% Dimensions of sampling points
dims = size(dphi{1},2);

% Open cme_output file and write header
fid_cme = fopen(cme_output, 'w');

fprintf(fid_cme,'*Heading\n');
fprintf(fid_cme,'** Generated by: store_cme_to_file.m\n');
fprintf(fid_cme,'** program: cme_v1.0.0\n');
fprintf(fid_cme,'** author: Konstantinos A. Mountris, PhD\n');
fprintf(fid_cme,'** email: konstantinos.mountris@gmail.com | kmountris@unizar.es\n');
fprintf(fid_cme,'** web: https://www.mountris.org\n');
fprintf(fid_cme,'** Points: number of points for which CME approximants are evaluated\n');
fprintf(fid_cme,'** Attributes: CME_P   - approximant      | CME_DPX - 1st X derivative\n');
fprintf(fid_cme,'**             CME_DPY - 1st Y derivative | CME_DPZ - 1st Z derivative\n');
fprintf(fid_cme,'*\n');
fprintf(fid_cme,'** Points: %d\n',s_num);
fprintf(fid_cme,'*\n');

% Write data
if (dims == 2)
    fprintf(fid_cme,'** Format: point ID, neighbor ID, CME_P, CME_DPX, CME_DPY\n');
    fprintf(fid_cme,'*\n');
    for s = 1:s_num
        for n = 1:length(neighs{s})
            fprintf(fid_cme,'%d %d %.15f %.15f %.15f\n',s,neighs{s}(n),phi{s}(n),dphi{s}(n,:));
        end        
    end
elseif (dims == 3)
    fprintf(fid_cme,'** Format: point ID, neighbor ID, CME_P, CME_DPX, CME_DPY, CME_DPZ\n');
    fprintf(fid_cme,'*\n');
    for s = 1:s_num
        for n = 1:length(neighs{s})
            fprintf(fid_cme,'%d %d %.15f %.15f %.15f %.15f\n',s,neighs{s}(n),phi{s}(n),dphi{s}(n,:));
        end        
    end
else
    error('Output supported only for 2D or 3D CME');
end

fprintf(fid_cme,'*\n** End of file\n*');
fclose(fid_cme);


% Open neighs_output file and write header
fid_neighs = fopen(neighs_output, 'w');

fprintf(fid_neighs,'*Heading\n');
fprintf(fid_cme,'** Generated by: store_cme_to_file.m\n');
fprintf(fid_cme,'** program: cme_v1.0.0\n');
fprintf(fid_cme,'** author: Konstantinos A. Mountris, PhD\n');
fprintf(fid_cme,'** email: konstantinos.mountris@gmail.com | kmountris@unizar.es\n');
fprintf(fid_cme,'** web: https://www.mountris.org\n');
fprintf(fid_neighs,'** Points: number of points for which neighbor nodes are stored\n');
fprintf(fid_neighs,'*\n');
fprintf(fid_neighs,'** Points: %d\n',s_num);
fprintf(fid_neighs,'*\n');
fprintf(fid_neighs,'** Format: neighbor nodes list per point separated by empty line\n');

% Store data
fprintf(fid_neighs,'*\n');
for s = 1:s_num
    for n = 1:length(neighs{s})-1
        fprintf(fid_neighs,'%d ',neighs{s}(n));
    end     
    fprintf(fid_neighs,'%d\n\n',neighs{s}(n+1));
end
    
fprintf(fid_neighs,'*\n** End of file\n*');
fclose(fid_neighs);

end

